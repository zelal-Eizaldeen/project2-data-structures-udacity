{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Bold;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red24\green31\blue38;\red242\green244\blue246;\red165\green171\blue175;
\red24\green31\blue38;\red242\green244\blue246;\red24\green31\blue38;\red243\green244\blue246;\red25\green60\blue255;
\red244\green245\blue246;\red24\green31\blue38;\red255\green255\blue255;\red252\green252\blue249;\red251\green251\blue249;
\red252\green252\blue249;\red252\green252\blue249;\red252\green252\blue249;}
{\*\expandedcolortbl;;\cssrgb\c12157\c16078\c19608;\cssrgb\c96078\c96471\c97255;\cssrgb\c70588\c72549\c74118;
\cssrgb\c12157\c16078\c19608;\cssrgb\c96078\c96471\c97255;\cssrgb\c12197\c16124\c19638;\cssrgb\c96190\c96583\c97247;\cssrgb\c12594\c35385\c100000;
\cssrgb\c96410\c96804\c97228;\cssrgb\c12276\c16215\c19699;\cssrgb\c100000\c100000\c100000;\cssrgb\c99032\c99031\c97999;\cssrgb\c98824\c98824\c98039;
\cssrgb\c98928\c98928\c98020;\cssrgb\c99136\c99134\c97978;\cssrgb\c99032\c99031\c98000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # Created a method called to_set() inside the LinkedList class to convert the LinkedList into a set\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 # A Set is the best collection to remove duplication and its complexity o(n).\
\
# Created a method called union to add all elements together and if the two sets are None then the union is None\
\pard\pardeftab720\partightenfactor0
\cf5 \cb6 \outl0\strokewidth0 # Created a method called intersection to add common  elements and if one of the sets is None then the intersection is None\cf2 \cb3 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\

\f1\b \cf7 \cb8 \ul \ulc7 \strokec7 Time complexity:\
\cf9 \cb10 \ulnone \strokec11 def to_set(self):\
        if self is None:\
            return None\
        current_node = self.head\
        convertedSet = set()\
        while current_node:\
            convertedSet.add(current_node.value)\
            current_node = current_node.next\
        return convertedSet\cf7 \cb8 \ul \ulc7 \strokec7 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs24 \cf12 \cb1 \ulnone \strokec13 f(n) = o(n)   # n is number of element\

\f3\b0 \cf14 \strokec14 \
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \strokec15 def union(llist_1, llist_2):\
    if llist_1 is None and llist_2 is None:\
        return None \
    unionSet = llist_1.to_set().union(llist_2.to_set())\
    print(unionSet)\
    llist = LinkedList()\
    for value in unionSet:\
        llist.append(value)\
    return llist\
\

\f2\b \cf12 \strokec13 f(n) = O(n)  # n is the number of values in the unionSet\

\f3\b0 \cf9 \strokec15 \
def intersection(llist_1, llist_2):\
    if llist_1 is None or llist_2 is None:\
        return None \
    instersection_set = llist_1.to_set().intersection(llist_2.to_set())\
    llist = LinkedList()\
    for value in instersection_set:\
        llist.append(value)\
    return llist\
\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b \cf12 \outl0\strokewidth0 f(n) = O(n)  # n is the number of values in the instersection_set\
\pard\pardeftab720\sl360\partightenfactor0

\f3\b0 \cf14 \outl0\strokewidth0 \strokec14 \
fn) = O(n)\
\cf9 \strokec15 \
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \strokec15 \
\cf14 \strokec14 \
}